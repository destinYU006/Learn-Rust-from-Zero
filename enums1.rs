// enums1.rs
//
// No hints this time! ;)

// I AM NOT DONE

#[derive(Debug)] // 自动为结构体、枚举实现 Debug trait 的代码。


enum Message {
    // TODO: define a few types of messages as used below
    // 内存角度: 无参数变体只需要存储枚举标签(通常1字节)
    // 编译器角度: 直接映射为整数值(如0)
    // 性能角度: 无额外内存开销，访问最快
  
    Quit,                  // 无参数的变体
  
    // 内存角度: 包含一个String，实际存储为3字结构(ptr+len+cap)，通常24字节(64位系统)，栈内存
    // 编译器角度: 需要为String分配堆内存，并管理其生命周期
    // 性能角度: 堆分配/释放有开销，字符串操作涉及引用计数
    Echo(String),          // 包含字符串的变体


    // 内存角度: 包含两个i32，共8字节，加枚举标签对齐后通常为16字节
    // 编译器角度: 按结构体布局处理，字段按顺序存储
    // 性能角度: 内存连续，访问高效，无堆分配
    Move { x: i32, y: i32 }, // 包含命名参数的结构体式变体

    // 内存角度: 包含三个u8，共3字节，加枚举标签对齐后通常为8字节
    // 编译器角度: 按元组布局处理，字段紧凑排列
    // 性能角度: 内存占用小，无堆分配，访问快
    ChangeColor(u8, u8, u8), // 包含三个u8参数的元组式变体
}



fn main() {
    // 内存操作: 栈上分配1字节存储Quit标签值(通常0)
    // 编译器优化: 直接将Quit映射为整数值，无需额外计算
    // 性能表现: O(1)，无堆操作
    println!("{:?}", Message::Quit);

      // 内存操作:
    // 1. 堆上分配存储"hello"的内存块(通常7字节: 5字符+1终止符+对齐)
    // 2. 栈上分配24字节的String结构，并指向堆内存
    // 3. 栈上分配16字节的Message::Echo结构(枚举标签+String)
    // 编译器优化: 内联String的构造和移动语义
    // 性能表现: O(1)，但涉及堆分配和引用计数
    println!("{:?}", Message::Echo("hello".to_string()));

    // 内存操作: 栈上分配16字节存储Move{x:10,y:20}及枚举标签
    // 编译器优化: 常量值直接嵌入指令，无需额外内存读取
    // 性能表现: O(1)，无堆操作
    println!("{:?}", Message::Move {x:10,y:20});
  
      // 内存操作: 栈上分配8字节存储ChangeColor(255,0,0)及枚举标签
    // 编译器优化: 小整数常量折叠，直接生成立即数指令
    // 性能表现: O(1)，无堆操作
    println!("{:?}", Message::ChangeColor(255,0,0));
}



//  上述代码的执行过程涉及到栈内存分配、堆内存分配、内存对齐和数据布局等关键机制。
// enum Message {
//     Quit,                  // 1字节标签 → 对齐到8字节
//     Echo(String),          // 24字节(String) + 1字节标签 → 对齐到32字节
//     Move { x: i32, y: i32 }, // 8字节(i32*2) + 1字节标签 → 对齐到16字节
//     ChangeColor(u8, u8, u8), // 3字节(u8*3) + 1字节标签 → 对齐到8字节
// }




// 在 Rust 中，#[derive(Debug)] 是一个派生宏（Derive Macro），
// 用于自动为结构体或枚举生成实现 Debug trait 的代码。
// 这允许你使用 {:?} 或 {:#?} 格式化占位符来打印类型的调试信息。
// 1. Debug trait 的作用
// Debug 是 Rust 标准库中的一个 trait，定义在 std::fmt 模块中。
// 实现 Debug trait 的类型可以使用 {:?}（单行格式）或 {:#?}（多行格式化）进行打印，主要用于调试目的。
//5. 其他常用的派生宏
// Rust 支持多种内置派生宏，常见的有：

// #[derive(Clone, Copy)]：自动实现复制语义。
// #[derive(PartialEq, Eq)]：自动实现相等性比较。
// #[derive(PartialOrd, Ord)]：自动实现排序比较。
// #[derive(Default)]：自动实现默认值。
// #[derive(Hash)]：自动实现哈希计算。
